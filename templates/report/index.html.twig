{% extends 'base.html.twig' %}

{% block title %}Redovisning{% endblock %}

{% block body %}
    <h1>Redovisning</h1>
    <ul class="kmom-nav">
    <li><a href="#kmom01">Kmom01</a></li>
    <li><a href="#kmom02">Kmom02</a></li>
    <li><a href="#kmom03">Kmom03</a></li>
    <li><a href="#kmom04">Kmom04</a></li>
    <li><a href="#kmom05">Kmom05</a></li>
    <li><a href="#kmom06">Kmom06</a></li>
    <li><a href="#kmom10">Kmom10</a></li>
</ul>


    <section id="kmom01">
        <h2>Kmom01</h2>
        <p>
        Jag har tidigare arbetat med objektorientering, både i tidigare kurser här men även online kurser i Coursera. Det känns både bekant men ändå aningen främmande. Jag har börjat uppskatta det mer dock då det håller projekten bättre strukturerade samt så är det lättare att göra justeringar i efterhand.

PHPs modell för klasser och objekt är ganska simpel: man definierar klasser med class, använder public, private och protected för synlighet och instansierar objekt med new. Att förstå konstruktorer, egenskaper och metoder är grunden för att komma igång och det börjar kännas naturligt för mig nu.
<br><br>
Kodbasen i me/report känns välstrukturerad, särskilt med Symfony som ramverk. Jag fastnade under starten av den, men kom lätt igång. Att skapa nya controllers via terminalen kändes så kul och smidigt då terminalen gjorde allt jobb och då blev det inga slarv typos! Det var kul att arbeta med routing, controllers och Twig, speciellt att allt är så uppdelat och tydligt.
<br><br>
Jag tyckte särskilt att avsnittet Coding Practices var nyttigt, eftersom det påminner om att man lätt glömmer bort grunderna i PHP när man blir mer van. Att ha tydlig kodstil och tänka på läsbarhet gör koden lättare att underhålla.

Generellt gillar jag hur artikeln lyfter fram att bra PHP-kod kräver lite extra tanke, men att språket ger bra verktyg om man bara använder dem rätt.

Jag tyckte även att avsnittet Errors and Exceptions var väldigt intressant eftersom det förklarade skillnaden mellan hur PHP och andra språk som Python hanterar fel. Det var särskilt bra att förstå att PHP inte automatiskt kastar undantag, utan oftast bara visar notices eller warnings.
<br><br>
Jag lärde mig även att man kan använda ErrorException för att själv kasta undantag och på så sätt göra koden mer robust, vilket känns extra relevant i ramverk som Symfony. En annan lärdom var att undvika @ för att tysta fel, då det kan gömma allvarliga problem, det är bättre att ta tag i felet innan det är försent.
<br><br>
Det var också bra att få en tydlig översikt av skillnaderna mellan olika feltyper som E_ERROR, E_WARNING och E_NOTICE och hur man kan justera felrapporteringen för utveckling eller produktion.
<br><br>
TIL: Jag lärde mig hur Symfony strukturerar kod enligt MVC och hur man skapar routes, controllers och templates. Det var också kul att leka med CSS och få bilder att snurra och glöda för en lite galen touch :-)
        <br><br>
        </p>
    </section>

    <section id="kmom02">
        <h2>Kmom02</h2>
        <p>
        I detta kmom har vi jobbat vidare med objektorienterad programmering i PHP och fokuserat mer på att bygga en applikation enligt MVC-modellen i Symfony. Vi har även introducerats till nya objektorienterade konstruktioner som arv, komposition, interface och traits.
        <br><br>
        <strong>Arv</strong> innebär att en klass ärver egenskaper och metoder från en annan klass. I PHP används `extends` för detta. Det gör det lätt att återanvända kod, till exempel när flera kontroller ärver från Symfony:s bascontroller.<br>
        <strong>Komposition</strong> innebär att en klass innehåller andra objekt som egenskaper. Istället för att ärva allt, använder man andra objekt inuti klassen. Det gör koden mer flexibel och lösare kopplad.<br>
        <strong>Interface</strong> används för att definiera vilka metoder en klass måste implementera, utan att säga hur. Det är ett sätt att skapa en slags kontrakt. I PHP används `interface` och `implements`.<br>
        <strong>Trait</strong> är ett sätt att återanvända kod i flera klasser utan arv. Det fungerar som en slags mixin och används med `use`. Det kan vara praktiskt för hjälpfunktioner eller gemensam funktionalitet.
        <br><br>
        Min implementation handlade om att skapa en kortlek med möjlighet att visa kort, dra kort, blanda och även visa det i ett API-format. Jag tycker ändå att jag löste uppgiften på ett bra sätt, men jag blev lite förvirrad då jag hade 2 terminaler öppna för MVC samt WEBAPP, så jag vart tvungen att flytta massor av filer för att komma upp i 10 commits!
        <br><br>
        Jag är ändå nöjd med min struktur i koden. Klasserna känns genomtänkta och följer en tydlig logik, även om det säkert går att förbättra hur vissa delar kommunicerar med varandra. Jag hade nog kunnat bryta ut logiken för kortleken ännu mer i egna hjälparklasser för att få bättre separation av ansvar. Stilen hade även kunnat förbättras men jag lade mer fokus på logik och kod än stil denna gång!
        <br><br>
        Att arbeta i Symfony med MVC börjar kännas mer bekvämt nu. Det känns ganska trevligt att arbeta med en strukturerad miljö där routing, controller och vyer är så tydligt separerade. Jag gillar att man snabbt kommer igång med hjälp av kommandon i terminalen och att mycket är förkonfigurerat åt en.
        <br><br>
        Jag uppskattar också hur Symfony gör det enkelt att arbeta med JSON-svar i API:er, särskilt med `JsonResponse`. Det var nytt för mig att jobba så strukturerat med API-endpoints, och det känns kul att förstå hur man kan bygga ut det till något större.
        <br><br>
        <strong>TIL:</strong> Jag lärde mig skillnaden mellan arv och komposition i praktiken och hur man använder interface och trait i PHP. Jag lärde mig också hur man bygger ett enkelt JSON-API i Symfony och hur man strukturerar det med controllers och routes.
        <br><br>
        </p>
        </section>

        <section id="kmom03">
        <h2>Kmom03</h2>
        <p>
        I detta kmom har vi byggt ett komplett kortspelet 21.
        <br><br>
        Att börja med att modellera spelet med flödesdiagram och pseudokod kändes faktiskt väldigt hjälpsamt, det gjorde att man hade en ram man kunde utgå från och bygga upp. Det blev mycket enklare att förstå hela spelprocessen i förväg, innan man ens började skriva kod. Det blev tydligare vilka metoder som behövdes och hur logiken borde vara uppbyggd. Jag tror absolut att det stöder problemlösning och planering särskilt i lite större applikationer där man lätt kan tappa bort sig annars. Jag gjorde även ett UML men det vart extremt stort, men båda dessa diagram underlättade processen enormt.
        <br><br>
        Min implementation bygger på klasser som `Game21`, `Card`, `CardHand`, `DeckOfCards` samt `CardGraphic`, så både nya men vi återanvänder även andra. Spelaren spelar mot banken, man kan dra kort, stanna, välja ess-värde, satsa pengar och spela flera rundor i rad tills någon förlorar allt. Jag tycker att jag lyckades ganska bra. Det var mycket logik att hålla reda på, men jag fick till en struktur där både vy, controller och modell samarbetade på ett tydligt sätt.
        <br><br>
        Jag är ganska nöjd med resultatet, även om det finns delar som skulle kunna förbättras. En förbättring kunde vara att bryta ut vissa delar av spelmekaniken till hjälparklasser eller services. Koden i `Game21`-klassen är ganska stor. Jag kunde också ha jobbat mer med att återanvända logik samt dela up CSS koden.
        <br><br>
        Symfony känns mer och mer trevligt att jobba i. Jag börjar förstå hur routing, controllers och templates hänger ihop, och hur man kan jobba modulärt och organiserat. Jag gillar särskilt hur tydligt man kan separera delar i sina egna mappar. Det känns också smidigt att arbeta med sessionsdata, och att ha allt förberett för att bygga ut appen med fler features.
        <br><br>
        Att använda Symfony för att skapa JSON-endpoints var också trevligt. Jag byggde en `/api/game`-rutt som visar aktuell spelstatus i JSON-format.
        <br><br>
        <strong>TIL:</strong> Jag lärde mig hur viktigt det är att börja med att modellera sin applikation med flödesdiagram och pseudokod innan man kastar sig in i själva kodningen. Det gav mig en klar struktur att följa och underlättade mycket när jag implementerade spelets olika steg.
        <br><br>
        </p>
        </section>

        <section id="kmom04">
        <h2>Kmom04</h2>
        <p>
        I detta kmom har jag jobbat med att skriva tester med PHPUnit och att dokumentera min kod med PHPDoc.
        <br><br>
        Vi har arbetat med att skriva test kod vid tiggare kurser så det var inte helt nytt, men det är alltid kul. Det hjälpte mig att förstå vad som faktiskt händer i mina metoder och gjorde att jag hittade några saker jag kunde förbättra. Jag tycker att phpunit är ett bra verktyg när man väl fått in grunderna, och det var tydligt att se vilka tester som gick igenom och vad som eventuellt fallerade. Det tog sin lilla tid att komma igång men gick ändå relativt smidigt då. Jag följde dokumentationen.
        <br><br>
        Jag tror jag lyckades få mer än 90% kodtäckning på alla mina modellklasser och det kändes bra att kunna se att koden verkligen testas ordentligt. Att se resultatet i HTML-rapporten gjorde det också lättare att få en överblick över vad som var täckt och vad som eventuellt saknades. Riktigt coolt när alla checkar var gröna!
        <br><br>
        Jag tycker min kod är ganska testbar. Det finns vissa delar, särskilt i spelets flöde, som var svårare att isolera i tester. Men jag försökte hålla mina metoder små och tydliga, vilket gjorde det lättare att skriva tester. Jag skrev även om en liten del av koden i `Game21` för att göra vissa delar enklare att testa, till exempel separerade jag ut vissa logikbitar som annars låg inuti andra metoder.
        <br><br>
        Jag tycker absolut att testbar kod hänger ihop med ren kod. När man skriver kod med testning i åtanke så blir det oftare mer uppdelat, tydligt och lättare att förstå. Det hjälper en inte använda sig an onödiga metoder och med hjälp at test resultaten kan koden förbättras. Coolt!
        <br><br>
        <strong>TIL:</strong> Jag lärde mig hur man skriver tester med PHPUnit, hur man tolkar kodtäckningsrapporter och hur viktigt det är att skriva testbar kod. Jag lärde mig också att generera dokumentation med PHPDoc och att dokumentation kan göra det lättare att förstå sin egen och andras kod.
        <br><br>
        </p>
    </section>


    <section id="kmom05">
    <h2>Kmom05</h2>
    <p>
    Nu har vi kommit långt i kursen, och det har verkligen varit kul. Jag tycker att detta kmom var otroligt trevligt, ett litet biblioteks register. Jag tycker att allt gick bra med strukturen, jag kom snabbt igång och stötte inte riktigt på problem. Jag är en MariaDB enjoyer så jag valde att testa just att använda det och det gick bra. Jag skapade databasen och lokalt fungerade allt perfekt. Det blev lite små strul när jag försöket ladda upp projektet via student servern. Först glömde jag att MariaDB inte är en fil, sedan använde jag UDBADM lösenordet och fick skäll att inläggnings uppgifterna inte stämde. Så jag kollade igenom våra guider och såg att det ska vara lösenordet vi får via studentportalen. Så efter att ha hittat vart lösenordet skulle vara löste det sig! As coolt!
    <br><br>
    I applikationen kan man se, lägga till, redigera och ta bort böcker. Jag försökte hålla gränssnittet enkelt och tydligt. Jag tänkte på att använda tydliga knappar och rubriker för att det ska vara lätt att förstå vad man kan göra på varje sida. Jag kollade igenom akademi bokhandeln för att få lite inspiration och hitta tre trevliga böcker. Tanked var en simpel tabell med bok namnen och sedan trycker man för att få fram bild och ytterligare information!
    <br><br>
    Det gick ganska bra att arbeta med ORM i Symfony. Det är smidigt att skapa entiteter med `make:entity` och sedan jobba vidare med migreringar. Att jobba med databasoperationer via Doctrine kändes lite läskigt särskilt när man jämför med att skriva egna SQL-frågor direkt i PHP. Jag gillar dock att det blir mindre risk för misstag och att man kan jobba mer objektorienterat. Samtidigt tycker jag det är bra att förstå vad som händer "bakom kulisserna", så jag försöker ändå hänga med i vad som händer i SQL-världen. Jag skulle säga att meuz24 för 6 månader sedan aldrig trott att meuz24 idag hade börjat gilla SQL och databaser! Super häftigt!
    <br><br>
     Att jobba med ORM var ganska smidigt. Det är skönt att slippa skriva SQL för hand och i stället kunna använda objekt. Doctrine gjorde det lätt att koppla databasen till min kod men det känns mer strukturerat än att jobba direkt med SQL, men jag tycker ändå det är bra att förstå hur databasen fungerar i bakgrunden.
    <br><br>
    <strong>TIL:</strong> Jag förstår hur ORM fungerar i praktiken och hur alla delar i Symfony hänger ihop, från routing till databas. Men min största victory är att jag lyckades använda mig av MariaDB till detta kmom och få allt att fungera i student servern!
    <br><br>
    </p>
    </section>

    <section id="kmom06">
        <h2>Kmom06</h2>
        <p>
        Den här delen av kursen var helt nytt för mig, att analysera och förbättra kodkvalitet med hjälp av verktyg som PhpMetrics och Scrutinizer. Jag tyckte det var intressant att se hur dessa verktyg faktiskt kan ge konkreta siffror på saker man annars bara "känner" i koden, som komplexitet eller kopplingar mellan klasser. Jag är van vid att få feedback av lärare vid inlämningar det är egentligen den ända feedbacken jag brukar få så det var riktigt kul att faktiskt kunna se resultaten från dessa tester och sedan förbättra koden innan inlämmningen!
        <br><br>
        PhpMetrics var visuellt tydligt och lätt att förstå. Jag gillade särskilt cirklarna och CRAP-score som gjorde det enkelt att hitta de "värsta" delarna av koden. Det kändes motiverande att kunna säga: "Okej, den här klassen har högt WMC och låg cohesion, den behöver delas upp." Jag blev lite beroende av att försöka få så många gröna cirklar som möjligt men det kändes så bra när rött och gult blev grönt! Jag uppskattade att man kunde se både klassnivå och metodnivå, det hjälpte mig när jag refaktorerade min Game21-klass som var den största boven!
        <br><br>
        Scrutinizer var lite knepigare att komma igång med. Först kändes det som att verktyget bara klagade på allt men ändå inget, sen så insåg jag att kod som inte jag hade skrivit blev testad. Men efter att ha förstått att man kunde justera .scrutinizer.yml för att bara analysera src/ så föll bitarna på plats. Det kändes riktigt kul när jag såg att poängen gick från 6.64 till 10 efter förbättringarna, och att testtäckningen ökade till 29 %. Badges gav en känsla av belöning, som små pokaler för kodkvalitet.
        <br><br>
        Min syn på kodkvalitet har blivit tydligare: det handlar inte bara om att koden fungerar, utan också om hur lätt den är att förstå, testa och underhålla. Jag tror absolut att man kan påvisa kodkvalitet till viss del med badges och metrics, även om det inte fångar hela bilden. Det är ett bra verktyg för att se trender och förbättringar över tid. Att koden fungerar idag betyder inte att det kommer göra det i framtiden, man måste kunna utveckla och uppdatera koden smidigt.
        <br><br>
        Redan idag vet jag att ett av mina förbättringsområden är att kommentera samt dokumentera min kod, innan jag började studera på BTH använde jag mig aldrig av kommentarer. Nu tvingar jag mig själv att använda de för att det ska bli en god vana. Att alltid hålla sig uppdaterad och att alltid testa kodens funktionalitet häjlper även, i detta kmom såg jag till att alltid testa olikad elar av min sida för att see att allt fungerar som tänkt.
        <br><br>
        <strong>TIL:</strong> Jag har lärt mig att verktyg som PhpMetrics och Scrutinizer kan användas praktiskt för att identifiera svagheter i koden och att man faktiskt kan mäta sin egen förbättring.
        <br><br>
        </p>
    </section>

    <section id="kmom10">
        <h2>Kmom10 Redovisning av projekt</h2>

        <h3>Krav 1–3: Webbplats</h3>
        <p>
            Jag valde att visualisera indikatorer kopplade till FN:s globala mål för hållbar utveckling, med fokus på växthusgasutsläpp och tillgång till rent vatten i Sverige och Danmark. Projektet är tillgängligt via en ny sektion under <code>/proj</code> som har en helt egen layout, med separata färger, typsnitt, navbar, header och footer. Jag har använt Twig för att bygga en ren, modern och responsiv design. Två interaktiva diagram implementerades med Chart.js där användaren kan filtrera per land. Det finns också en introduktionssida om projektet och en summering längst ned. Jag har dessutom skapat en separat stylesheet för projektet för att tydligt särskilja den från övriga delar av webbplatsen.
        </p>

        <h3>Krav 4: JSON API</h3>
        <p>
            API:t har fem endpoints: tre GET och två POST. Man kan hämta alla indikatorer, en specifik indikator och tillhörande mätvärden. Via POST går det att lägga till nya mätvärden, samt återställa databasen till original. Allt hanteras med Symfony och Doctrine ORM via en named connection till projektets databas. På sidan <code>/proj/api</code> presenteras alla endpoints i en tabell med klickbara GET-länkar och instruktioner för hur man testar POST i Postman. Jag använder <code>JsonResponse</code> för att returnera svaren och hämtar data via ORM-repositorier i stället för DBAL-metoder. API:t är fullt ORM-baserat för all vanlig datalagring och hämtning. Undantaget är återställningsfunktionen <code>/api/proj/reset</code> som använder DBAL direkt eftersom det rör sig om en bulk-SQL-operation som inte lämpar sig för ORM. Det gjorde API:t enklare att testa och mer integrerat med resten av projektets struktur.
        </p>

        <h3>Krav 5: ORM och databassida</h3>
        <p>
            Jag har använt MariaDB och kopplat Symfony till databasen med Doctrine ORM. Databasen innehåller tre tabeller: <code>indicator</code>, <code>measurement</code> och <code>measurement_original</code>. ER-diagrammet finns som bild på <code>/proj/about/database</code>. Relationerna hanteras genom <code>indicator_id</code> som foreign key. Jag skapade en named connection för att separera projektets databas från resten av webbplatsen.
        </p>
        <p>
            Jag gjorde även en reflektion över skillnaden mellan ORM och att skriva SQL manuellt. ORM underlättar relationshantering och testbarhet men kan kännas abstrakt ibland. Jag föredrar nu ORM för större projekt, men tycker det är viktigt att förstå SQL i grunden.
        </p>

        <h3>Krav 6: Avancerade features</h3>
        <ol>
            <li>Jag har konfigurerat två named connections i Symfony: en för biblioteket och en för projektet, men båda kopplar till samma databas (<code>meuz24</code>) på studentservern eftersom vi endast får ha en fysisk databas enligt kursens regler.</li>
            <li>Jag har byggt upp en separat layout för <code>/proj</code> med egen base-template, navbar, footer och färgprofil.</li>
            <li>Visualiseringen sker med Chart.js och laddas med dynamisk JSON från API:t.</li>
            <li>Alla delar är responsiva och fungerar på både mobil och desktop.</li>
            <li>En återställningsfunktion tar bort tillagda mätvärden och laddar om sidan automatiskt.</li>
        </ol>

        <h3>Reflektion kring projektets genomförande</h3>
        <p>
            Projektet var roligt att arbeta med men ganska omfattande. Att få ihop allt med JSON, databas, ORM och Chart.js tog tid, särskilt att få layouten att kännas som en "egen webbplats".
        </p>
        <p>
            Det var också en utmaning att strukturera API:t tydligt och dokumentera allt korrekt i vyn. Jag stötte på problem med att hantera flera databaser i Symfony men lyckades lösa det.
        </p>
        <p>
            Det som gick lätt var layout och styling samt att bygga JSON-endpoints. Att skapa en databas från verklig statistik och kombinera det med visualisering gjorde att projektet kändes mer meningsfullt. Sådana projekt där man redovisar statistik inom intressanta och relevanta områden är väldigt trevliga. Det kändes verkligt och jag fick också en tillbakablick till när jag läste samhällskunskap och lärde mig om FN:s globala mål.
        </p>

        <h3>Tankar om kursen</h3>
        <p>
            Jag är väldigt nöjd med den här kursen. Det har varit tydligt vad som ska göras, och jag gillar att man successivt bygger vidare på samma kodbas. Att kombinera Symfony, ORM, REST API och testning har varit givande. Jag lär mig bäst genom praktiskt arbete och att bygga själv, och det har fungerat väldigt bra.
        </p>
        <p>
            Materialet är pedagogiskt och handledningen har varit snabb och hjälpsam. Jag rekommenderar verkligen kursen till andra. Mitt betyg blir en stark 13 av 10.
        </p>
        <p>
            Jag är så otroligt nöjd med BTH och detta program. Jag har delat med mig av min upplevelse och jag går verkligen runt och säger att jag älskar att studera på BTH. Otroligt trevliga och kunniga lärare, väldigt bra material och kursuppläggen är riktigt trevliga.
        </p>
    </section>


{% endblock %}
