{% extends 'base.html.twig' %}

{% block title %}Redovisning{% endblock %}

{% block body %}
    <h1>Redovisning</h1>
    <ul class="kmom-nav">
    <li><a href="#kmom01">Kmom01</a></li>
    <li><a href="#kmom02">Kmom02</a></li>
    <li><a href="#kmom03">Kmom03</a></li>
    <li><a href="#kmom04">Kmom04</a></li>
    <li><a href="#kmom05">Kmom05</a></li>
    <li><a href="#kmom06">Kmom06</a></li>
    <li><a href="#kmom07">Kmom07</a></li>
    <li><a href="#kmom10">Kmom10</a></li>
</ul>


    <section id="kmom01">
        <h2>Kmom01</h2>
        <p>
        Jag har tidigare arbetat med objektorientering, både i tidigare kurser här men även online kurser i Coursera. Det känns både bekant men ändå aningen främmande. Jag har börjat uppskatta det mer dock då det håller projekten bättre strukturerade samt så är det lättare att göra justeringar i efterhand.

PHPs modell för klasser och objekt är ganska simpel: man definierar klasser med class, använder public, private och protected för synlighet och instansierar objekt med new. Att förstå konstruktorer, egenskaper och metoder är grunden för att komma igång och det börjar kännas naturligt för mig nu.
<br><br>
Kodbasen i me/report känns välstrukturerad, särskilt med Symfony som ramverk. Jag fastnade under starten av den, men kom lätt igång. Att skapa nya controllers via terminalen kändes så kul och smidigt då terminalen gjorde allt jobb och då blev det inga slarv typos! Det var kul att arbeta med routing, controllers och Twig, speciellt att allt är så uppdelat och tydligt.
<br><br>
Jag tyckte särskilt att avsnittet Coding Practices var nyttigt, eftersom det påminner om att man lätt glömmer bort grunderna i PHP när man blir mer van. Att ha tydlig kodstil och tänka på läsbarhet gör koden lättare att underhålla.

Generellt gillar jag hur artikeln lyfter fram att bra PHP-kod kräver lite extra tanke, men att språket ger bra verktyg om man bara använder dem rätt.

Jag tyckte även att avsnittet Errors and Exceptions var väldigt intressant eftersom det förklarade skillnaden mellan hur PHP och andra språk som Python hanterar fel. Det var särskilt bra att förstå att PHP inte automatiskt kastar undantag, utan oftast bara visar notices eller warnings.
<br><br>
Jag lärde mig även att man kan använda ErrorException för att själv kasta undantag och på så sätt göra koden mer robust, vilket känns extra relevant i ramverk som Symfony. En annan lärdom var att undvika @ för att tysta fel, då det kan gömma allvarliga problem, det är bättre att ta tag i felet innan det är försent.
<br><br>
Det var också bra att få en tydlig översikt av skillnaderna mellan olika feltyper som E_ERROR, E_WARNING och E_NOTICE och hur man kan justera felrapporteringen för utveckling eller produktion.
<br><br>
TIL: Jag lärde mig hur Symfony strukturerar kod enligt MVC och hur man skapar routes, controllers och templates. Det var också kul att leka med CSS och få bilder att snurra och glöda för en lite galen touch :-)
        <br><br>
        </p>
    </section>

    <section id="kmom02">
        <h2>Kmom02</h2>
        <p>
        </p>
    </section>

    <section id="kmom03">
        <h2>Kmom03</h2>
        <p>
        </p>
    </section>

    <section id="kmom04">
        <h2>Kmom04</h2>
        <p>
        </p>
    </section>

    <section id="kmom05">
        <h2>Kmom05</h2>
        <p>
        </p>
    </section>

    <section id="kmom06">
        <h2>Kmom06</h2>
        <p>
        </p>
    </section>

    <section id="kmom07">
        <h2>Kmom07</h2>
        <p>
        </p>
    </section>

    <section id="kmom10">
        <h2>Kmom10</h2>
        <p>
        </p>
    </section>

{% endblock %}
