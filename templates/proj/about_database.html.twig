{% extends 'proj/base_proj.html.twig' %}

{% block title %}Databas – Hållbarhetsprojekt{% endblock %}

{% block body %}
<section class="project-about">
    <h1 class="about-title">Databasstruktur</h1>

    <p class="about-intro">
        Här visas den databasstruktur som används i projektet för att lagra indikatorer och mätvärden kopplade till hållbar utveckling.
    </p>

    <h2 class="about-sub">ER-diagram</h2>
    <img src="{{ asset('images/er.png') }}" alt="ER-diagram" style="max-width:100%; border:1px solid #ccc; padding:1rem; background:#fff;">

    <h2 class="about-sub">Tabeller</h2>
    <ul>
        <li><strong>indicator</strong>: Sparar indikatorer med namn och beskrivning.</li>
        <li><strong>measurement</strong>: Sparar mätvärden kopplade till indikatorer, inklusive år, värde, enhet och land.</li>
        <li><strong>measurement_original</strong>: Innehåller ursprungsdata (2015–2020) som används vid återställning.</li>
    </ul>

    <h2 class="about-sub">Relationer</h2>
    <p>
        Varje mätvärde i <code>measurement</code> är kopplat till en indikator i <code>indicator</code> via <code>indicator_id</code>. Detta hanteras i ORM med en <code>@ManyToOne</code>-relation i klassen <code>Measurement</code>, och en <code>@OneToMany</code>-relation i <code>Indicator</code>.
    </p>

    <h2 class="about-sub">Databasmotor och ORM</h2>
    <p>
        Projektet använder <strong>MariaDB</strong> och alla databasoperationer hanteras genom <strong>Doctrine ORM</strong> i Symfony. Jag har använt annoteringar i entitetsklasserna för att definiera tabellstruktur och relationer, vilket möjliggör automatisk schemahantering och migreringar.
    </p>

    <h2 class="about-sub">Reflektion kring ORM</h2>
    <p>
        Att arbeta med Doctrine ORM gör det enklare att strukturera koden objektorienterat och koppla ihop databasen med PHP-klasser. Det minskar risken för SQL-fel och gör det lätt att hantera relationer mellan tabeller. I databaskursen skrev vi all SQL för hand, vilket gav mer kontroll men också mer att hålla reda på. Med ORM räcker det att definiera relationer i PHP-kod och sedan skapa migreringar automatiskt. Det sparar tid och ger bättre överblick. Nackdelen är att man ibland tappar kontrollen över exakt hur SQL-frågorna byggs. Jag tycker dock att fördelen med läsbarhet, struktur och typkontroll väger tyngre. När projekt växer blir ORM ett kraftfullt verktyg. Jag har nu börjat uppskatta det och tycker det underlättar både utveckling och testning.
    </p>

    <div class="about-links">
        <a href="{{ path('proj_about') }}" class="about-button">← Tillbaka till projektbeskrivningen</a>
    </div>
</section>
{% endblock %}
